{"version":3,"sources":["default~components-home-home-module~components-users-users-module~components-usuarios-usuarios-module-es5.js","webpack:///node_modules/q/q.js"],"names":[],"mappings":"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","file":"x","sourcesContent":["(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[\"default~components-home-home-module~components-users-users-module~components-usuarios-usuarios-module\"],{\n\n/***/ \"./node_modules/q/q.js\":\n/*!*****************************!*\\\n  !*** ./node_modules/q/q.js ***!\n  \\*****************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (true) {\n        module.exports = definition();\n\n    // RequireJS\n    } else { var previousQ, global; }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.nextTick()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack &&\n        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack) {\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        error.stack = filterStackString(concatedStacks);\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n        promise.source = newPromise;\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected() {\n            pendingCount--;\n            if (pendingCount === 0) {\n                deferred.reject(new Error(\n                    \"Can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected.\"\n                ));\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\nQ.noConflict = function() {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n\n\n/***/ })\n\n}]);\n//# sourceMappingURL=default~components-home-home-module~components-users-users-module~components-usuarios-usuarios-module-es2015.js.map","// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2012 Kris Kowal under the terms of the MIT\n * license found at http://github.com/kriskowal/q/raw/master/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n        // Prefer window over self for add-on scripts. Use self for\n        // non-windowed contexts.\n        var global = typeof window !== \"undefined\" ? window : self;\n\n        // Get the `window` object, save the previous Q global\n        // and initialize Q as a global.\n        var previousQ = global.Q;\n        global.Q = definition();\n\n        // Add a noConflict function so Q can be removed from the\n        // global namespace.\n        global.Q.noConflict = function () {\n            global.Q = previousQ;\n            return this;\n        };\n\n    } else {\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.nextTick()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack &&\n        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack) {\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        error.stack = filterStackString(concatedStacks);\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n        promise.source = newPromise;\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected() {\n            pendingCount--;\n            if (pendingCount === 0) {\n                deferred.reject(new Error(\n                    \"Can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected.\"\n                ));\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\nQ.noConflict = function() {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n"]}